{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Router from \"next/router\";\nimport { getUserFromServerCookie, getUserFromLocalCookie } from \"../lib/auth\";\nexport default (Page => {\n  var _temp;\n\n  return _temp = class DefaultPage extends Component {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"logout\", eve => {\n        if (eve.key === \"logout\") {\n          Router.push(`/?logout=${eve.newValue}`);\n        }\n      });\n    }\n\n    static async getInitialProps({\n      req\n    }) {\n      const loggedUser = false ? getUserFromLocalCookie() : getUserFromServerCookie(req);\n      const pageProps = Page.getInitialProps && Page.getInitialProps(req);\n      let path = req ? req.pathname : \"\";\n      path = \"\";\n      return _objectSpread({}, pageProps, {\n        loggedUser,\n        currentUrl: path,\n        isAuthenticated: !!loggedUser\n      });\n    }\n\n    componentDidMount() {\n      window.addEventListener(\"storage\", this.logout, false);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener(\"storage\", this.logout, false);\n    }\n\n    render() {\n      return __jsx(Page, this.props);\n    }\n\n  }, _temp;\n});","map":null,"metadata":{},"sourceType":"module"}