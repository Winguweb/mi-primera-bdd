{"ast":null,"code":"/* /lib/auth.js */\nimport jwtDecode from \"jwt-decode\";\nimport Cookies from \"js-cookie\";\nimport Strapi from \"strapi-sdk-javascript/build/main\";\nimport Router from \"next/router\";\nconst apiUrl = process.env.API_URL || \"http://localhost:1337\";\nconst strapi = new Strapi(apiUrl);\nexport const strapiRegister = (username, email, password) => {\n  if (!false) {\n    return undefined;\n  }\n\n  strapi.register(username, email, password).then(res => {\n    setToken(res);\n  });\n  return Promise.resolve();\n}; //use strapi to get a JWT and token object, save\n//to approriate cookei for future requests\n\nexport const strapiLogin = (email, password) => {\n  if (!false) {\n    return;\n  } // Get a token\n\n\n  strapi.login(email, password).then(res => {\n    setToken(res);\n  });\n  return Promise.resolve();\n};\nexport const setToken = token => {\n  if (!false) {\n    return;\n  }\n\n  Cookies.set(\"username\", token.user.username);\n  Cookies.set(\"jwt\", token.jwt);\n  Cookies.set(\"id\", token.user.id);\n\n  if (Cookies.get(\"username\")) {\n    Router.push(\"/\");\n  }\n};\nexport const unsetToken = () => {\n  if (!false) {\n    return;\n  }\n\n  Cookies.remove(\"jwt\");\n  Cookies.remove(\"username\");\n  Cookies.remove(\"cart\"); // to support logging out from all windows\n\n  window.localStorage.setItem(\"logout\", Date.now());\n  Router.push(\"/login\");\n};\nexport const getUserFromServerCookie = req => {\n  if (!req.headers.cookie || \"\") {\n    return undefined;\n  }\n\n  let username = req.headers.cookie.split(\";\").find(user => user.trim().startsWith(\"username=\"));\n\n  if (username) {\n    username = username.split(\"=\")[1];\n  }\n\n  const jwtCookie = req.headers.cookie.split(\";\").find(c => c.trim().startsWith(\"jwt=\"));\n\n  if (!jwtCookie) {\n    return undefined;\n  }\n\n  const jwt = jwtCookie.split(\"=\")[1];\n  return jwtDecode(jwt), username;\n};\nexport const getUserFromLocalCookie = () => {\n  return Cookies.get(\"username\");\n}; //these will be used if you expand to a provider such as Auth0\n\nconst getQueryParams = () => {\n  const params = {};\n  window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\n    params[$1] = $3;\n  });\n  return params;\n};\n\nexport const extractInfoFromHash = () => {\n  if (!false) {\n    return undefined;\n  }\n\n  const {\n    id_token,\n    state\n  } = getQueryParams();\n  return {\n    token: id_token,\n    secret: state\n  };\n};","map":null,"metadata":{},"sourceType":"module"}